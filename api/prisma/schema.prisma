generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}
//
// model Employee {
//   id String @id @default(uuid())
//
//   firstName  String   @map("first_name")
//   lastName   String   @map("last_name")
//   middleName String   @map("middle_name")
//   birthDate  DateTime @map("birth_date")
//
//   passport Passport?
//
//   address Address?
//
//   createdAt DateTime  @default(now()) @map("created_at")
//   updatedAt DateTime  @updatedAt @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")
//
//   @@index([deletedAt])
//   @@map("employees")
// }
//
// model Passport {
//   id String @id @default(uuid())
//
//   Number       String   @map("number")
//   Series       String   @map("series")
//   IssuedBy     String   @map("issued_by")
//   IssuedDate   DateTime @map("issued_date")
//   DevisionCode String   @map("devision_code")
//
//   employeeId String   @unique @map("employee_id")
//   employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
//
//   createdAt DateTime  @default(now()) @map("created_at")
//   updatedAt DateTime  @updatedAt @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")
//
//   @@index([deletedAt])
//   @@map("passports")
// }
//
// model Address {
//   id String @id @default(uuid())
//
//   region    String  @map("region")
//   locality  String  @map("locality")
//   street    String  @map("street")
//   house     String  @map("house")
//   building  String? @map("building")
//   apartment String  @map("apartment")
//
//   employeeId String   @unique @map("employee_id")
//   employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
//
//   createdAt DateTime  @default(now()) @map("created_at")
//   updatedAt DateTime  @updatedAt @map("updated_at")
//   deletedAt DateTime? @map("deleted_at")
//
//   @@index([deletedAt])
//   @@map("addresses")
// }

model Organization {
  id String @id @default(uuid())

  name    String @map("name")
  comment String @map("comment")

  departments Department[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([deletedAt])
  @@map("organizations")
}

model Department {
  id String @id @default(uuid())

  name    String @map("name")
  comment String @map("comment")

  organizationId String       @map("organization_id")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  parentId String       @map("parent_id")
  parent   Department?  @relation("DepartmentChildren", fields: [parentId], references: [id])
  children Department[] @relation("DepartmentChildren")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([deletedAt])
  @@map("departments")
}

model Position {
  id String @id @default(uuid())

  name String @map("name")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([deletedAt])
  @@map("positions")
}
